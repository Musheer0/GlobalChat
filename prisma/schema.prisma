// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]   // Assuming Account is another model
  sessions      Session[]   // Assuming Session is another model
  msgs          Message[]   // Assuming Message is another model
  policy       Boolean  @default(true)
  @@map("users")
}
model Message {
  id      String    @id @default(cuid())
  msg     String?
  created DateTime  @default(now())
  updated DateTime  @default(now())
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
 media Json[]  
// todo add  audio 
  @@map("messages")
}
model BugReport {
  id String @id @default(cuid())
  issue String  @default("BugReport")
  createAt  DateTime @default(now())
  media   Json[]
  Description String? 
}
// model Media {
//   id String @id @default(cuid())
//   name String
//   data  Bytes
//   createdAt DateTime @default(now())
//   size  Int
//   type String
//   baseUri  String
// }